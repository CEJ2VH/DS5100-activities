     1	import pandas as pd
     2	class BookLover():
     3	    """Description
     4	
     5	    Attributes
     6	    ----------
     7	    Name
     8	    Email
     9	    Fav_genre
    10	    Num_Books= # books read, or size of list passed
    11	    Book list
    12	    
    13	    Methods
    14	    -------
    15	    __init__(self, ticker, sector, prices):
    16	        Constructor
    17	    
    18	    def add_book(self,new_book_name,book_rating):
    19	    Adds a book and rating, as long as it doesn't already exist
    20	       
    21	    def has_read(self, book_name_check):
    22	    takes a book name and sees if it's in the list
    23	    
    24	    num_books_read(self):
    25	    returns the length of book list
    26	    
    27	    def fav_books(self):
    28	    Returns book list for all books with a rating of 4 or higher
    29	
    30	    """
    31	 
    32	    
    33	    def __init__(self, name, email, fav_genre, num_books = 0,book_list = pd.DataFrame({'book_name':[], 'book_rating':[]}) ):
    34	        self.name = name
    35	        self.email=email
    36	        self.fav_genre=fav_genre
    37	        self.num_books=num_books
    38	        self.book_list=book_list
    39	
    40	    def add_book(self,new_book_name,book_rating):
    41	        for x in self.book_list['book_name']:
    42	            if x == new_book_name:
    43	                #Printing out a response and not telling the user 
    44	                print("Error: This book is already in your book list!")
    45	                break
    46	        else:
    47	            new_book = pd.DataFrame({'book_name': [new_book_name], 'book_rating': [book_rating]})
    48	            self.book_list = pd.concat([self.book_list, new_book], ignore_index=True)      
    49	        
    50	    def has_read(self, book_name_check):
    51	        read_check=False 
    52	        if book_name_check in self.book_list['book_name'].values:
    53	                read_check=True
    54	        return read_check
    55	    
    56	    def num_books_read(self):
    57	        num_books=len(self.book_list.index)
    58	        return num_books
    59	        
    60	    def fav_books(self):
    61	        fav_books_list = self.book_list.loc[self.book_list['book_rating'] > 3]
    62	        return fav_books_list
    63	import BookLover
    64	import unittest
    65	
    66	class BookLoverTestSuite(unittest.TestCase):
    67	    
    68	    def test_1_add_book(self): 
    69	        # add a book and test if it is in `book_list`.
    70	        test_bookadd = BookLover.BookLover("Huck Finn", "gonefishin@missouri.org", "Picture Books")
    71	        test_bookadd.add_book("The Bible", 2)
    72	        self.assertTrue("The Bible" in test_bookadd.book_list['book_name'].values)
    73	
    74	    def test_2_add_book(self):
    75	        # add the same book twice. Test if it's in `book_list` only once.
    76	        test_add2 = BookLover.BookLover("Dorian Grey", "dontchecktheattic.gov", "Self Help")
    77	        test_add2.add_book("Atlas Shrugged", 3)
    78	        test_add2.add_book("Atlas Shrugged", 3)
    79	        self.assertEqual(test_add2.book_list['book_name'].value_counts()['Atlas Shrugged'], 1)
    80	                
    81	    def test_3_has_read(self): 
    82	        # pass a book in the list and test if the answer is `True`.
    83	        test_hasread=BookLover.BookLover("Gandalf the Grey", "maiarlover@arda.gov", "Mythology")
    84	        test_hasread.add_book("Beowulf",4)
    85	        self.assertTrue(test_hasread.has_read("Beowulf"))
    86	        
    87	    def test_4_has_read(self): 
    88	        # pass a book NOT in the list and use `assert False` to test the answer is `True`
    89	        test_hasread=BookLover.BookLover("Simba", "justanormallion@aol.com", "Entymology")
    90	        test_hasread.add_book("The Prince",2)
    91	        self.assertFalse(test_hasread.has_read("Recovering From the Loss of a Loved One"))
    92	        
    93	    def test_5_num_books_read(self): 
    94	        # add some books to the list, and test num_books matches expected.
    95	        test_numbooks = BookLover.BookLover("Jane Bennet", "sistersbeforemisters@pemberly.org", "Romance")
    96	        test_numbooks.add_book("Shakespeare's Sonnets",3)
    97	        test_numbooks.add_book("The Feminine Mystique",4)
    98	        test_numbooks.add_book("He's Just Not that Into You",5)
    99	        test_numbooks.num_books_read()
   100	        expected = 3
   101	        self.assertEqual(test_numbooks.num_books_read(), expected)
   102	
   103	    def test_6_fav_books(self):
   104	        # add some books with ratings to the list, making sure some of them have rating > 3. 
   105	        # Your test should check that the returned books have rating  > 3
   106	        sarahsrecentbooks=BookLover.BookLover("Sarah Hall", "CEJ2VH@virginia.gov", "Historical Fiction")
   107	        sarahsrecentbooks.add_book("Little Women",4)
   108	        sarahsrecentbooks.add_book("The Dutch House",2)
   109	        sarahsrecentbooks.add_book("A Deadly Education",3)
   110	        sarahsrecentbooks.add_book("Queen of the Damned",1)
   111	        sarahfav=sarahsrecentbooks.fav_books()
   112	        fav_nums=sarahfav['book_rating'].to_list()
   113	        favbooks=0
   114	        for nums in fav_nums:
   115	            if nums > 3:
   116	                favbooks += 1
   117	        self.assertTrue(favbooks,len(sarahfav))       
   118	if __name__ == '__main__':
   119	    
   120	    unittest.main(verbosity=3)
   121	Python 3.10.6 (tags/v3.10.6:9c7b4bd, Aug  1 2022, 21:53:49) [MSC v.1932 64 bit (AMD64)] on win32
   122	Type "help", "copyright", "credits" or "license()" for more information.
   123	
   124	=================== RESTART: C:\Users\Hall\booklover_test.py ===================
   125	test_1_add_book (__main__.BookLoverTestSuite) ... ok
   126	test_2_add_book (__main__.BookLoverTestSuite) ... Error: This book is already in your book list!
   127	ok
   128	test_3_has_read (__main__.BookLoverTestSuite) ... ok
   129	test_4_has_read (__main__.BookLoverTestSuite) ... ok
   130	test_5_num_books_read (__main__.BookLoverTestSuite) ... ok
   131	test_6_fav_books (__main__.BookLoverTestSuite) ... ok
   132	
   133	----------------------------------------------------------------------
   134	Ran 6 tests in 0.034s
   135	
   136	OK
   137	import BookLover
   138	import unittest
   139	
   140	class BookLoverTestSuite(unittest.TestCase):
   141	    
   142	    def test_1_add_book(self): 
   143	        # add a book and test if it is in `book_list`.
   144	        test_bookadd = BookLover.BookLover("Huck Finn", "gonefishin@missouri.org", "Picture Books")
   145	        test_bookadd.add_book("The Bible", 2)
   146	        self.assertTrue("The Bible" in test_bookadd.book_list['book_name'].values)
   147	
   148	    def test_2_add_book(self):
   149	        # add the same book twice. Test if it's in `book_list` only once.
   150	        test_add2 = BookLover.BookLover("Dorian Grey", "dontchecktheattic.gov", "Self Help")
   151	        test_add2.add_book("Atlas Shrugged", 3)
   152	        test_add2.add_book("Atlas Shrugged", 3)
   153	        self.assertEqual(test_add2.book_list['book_name'].value_counts()['Atlas Shrugged'], 1)
   154	                
   155	    def test_3_has_read(self): 
   156	        # pass a book in the list and test if the answer is `True`.
   157	        test_hasread=BookLover.BookLover("Gandalf the Grey", "maiarlover@arda.gov", "Mythology")
   158	        test_hasread.add_book("Beowulf",4)
   159	        self.assertTrue(test_hasread.has_read("Beowulf"))
   160	        
   161	    def test_4_has_read(self): 
   162	        # pass a book NOT in the list and use `assert False` to test the answer is `True`
   163	        test_hasread=BookLover.BookLover("Simba", "justanormallion@aol.com", "Entymology")
   164	        test_hasread.add_book("The Prince",2)
   165	        self.assertFalse(test_hasread.has_read("Recovering From the Loss of a Loved One"))
   166	        
   167	    def test_5_num_books_read(self): 
   168	        # add some books to the list, and test num_books matches expected.
   169	        test_numbooks = BookLover.BookLover("Jane Bennet", "sistersbeforemisters@pemberly.org", "Romance")
   170	        test_numbooks.add_book("Shakespeare's Sonnets",3)
   171	        test_numbooks.add_book("The Feminine Mystique",4)
   172	        test_numbooks.add_book("He's Just Not that Into You",5)
   173	        test_numbooks.num_books_read()
   174	        expected = 3
   175	        self.assertEqual(test_numbooks.num_books_read(), expected)
   176	
   177	    def test_6_fav_books(self):
   178	        # add some books with ratings to the list, making sure some of them have rating > 3. 
   179	        # Your test should check that the returned books have rating  > 3
   180	        sarahsrecentbooks=BookLover.BookLover("Sarah Hall", "CEJ2VH@virginia.gov", "Historical Fiction")
   181	        sarahsrecentbooks.add_book("Little Women",4)
   182	        sarahsrecentbooks.add_book("The Dutch House",2)
   183	        sarahsrecentbooks.add_book("A Deadly Education",3)
   184	        sarahsrecentbooks.add_book("Queen of the Damned",1)
   185	        sarahfav=sarahsrecentbooks.fav_books()
   186	        fav_nums=sarahfav['book_rating'].to_list()
   187	        favbooks=0
   188	        for nums in fav_nums:
   189	            if nums > 3:
   190	                favbooks += 1
   191	        self.assertTrue(favbooks,len(sarahfav))       
   192	if __name__ == '__main__':
   193	    
   194	    unittest.main(verbosity=3)
   195	Python 3.10.6 (tags/v3.10.6:9c7b4bd, Aug  1 2022, 21:53:49) [MSC v.1932 64 bit (AMD64)] on win32
   196	Type "help", "copyright", "credits" or "license()" for more information.
   197	
   198	=================== RESTART: C:\Users\Hall\booklover_test.py ===================
   199	test_1_add_book (__main__.BookLoverTestSuite) ... ok
   200	test_2_add_book (__main__.BookLoverTestSuite) ... Error: This book is already in your book list!
   201	ok
   202	test_3_has_read (__main__.BookLoverTestSuite) ... ok
   203	test_4_has_read (__main__.BookLoverTestSuite) ... ok
   204	test_5_num_books_read (__main__.BookLoverTestSuite) ... ok
   205	test_6_fav_books (__main__.BookLoverTestSuite) ... ok
   206	
   207	----------------------------------------------------------------------
   208	Ran 6 tests in 0.034s
   209	
   210	OK
